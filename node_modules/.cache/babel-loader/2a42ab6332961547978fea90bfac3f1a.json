{"ast":null,"code":"var _jsxFileName = \"/home/przemek/Documents/TrelloVol2-FrontEnd/src/components/table.component.tsx\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport UserService from \"../services/user.service\";\nimport Card from \"react-bootstrap/Card\";\nimport styles from \"./tables.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport ApiService from \"../services/api.service\";\nimport { ListModel } from \"../models/list.model\";\nimport { CardModel } from \"../models/card.model\";\nimport Form from \"react-bootstrap/Form\";\nexport default class TablesComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      redirect: false,\n      redirectUrl: '',\n      refresh: false,\n      creationView: false,\n      newListName: '',\n      objectToCreate: '',\n      newCardName: ''\n    };\n    this.lists = [];\n    this.cards = [];\n\n    this.render = () => {\n      UserService.subject.subscribe(() => {\n        this.setState({\n          redirect: true,\n          redirectUrl: '/login'\n        });\n      });\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderRedirect(), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.handleBackToBoards(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, \"Back to boards\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.toggleCreationView(true, 'list'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }, \"New list\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.creationForm,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }, this.createListCreationView()), /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.tables,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, this.createLists())));\n    };\n  }\n\n  refresh() {\n    this.setState({\n      refresh: false\n    });\n    this.setState({\n      refresh: true\n    });\n  }\n\n  handleBackToBoards() {\n    this.setState({\n      redirect: true,\n      redirectUrl: 'tables'\n    });\n  }\n\n  async componentDidMount() {\n    this.lists = await ApiService.GetLists(+window.location.pathname.split('/')[2]);\n    const buffer = [];\n\n    for (const list of this.lists) {\n      let cards = await ApiService.GetCards(list.getListID());\n\n      for (const card of cards) {\n        buffer.push(card);\n      }\n    }\n\n    this.cards = buffer;\n    this.refresh();\n  }\n\n  createLists() {\n    let lists = [];\n\n    if (this.state.refresh) {\n      let view = [];\n      this.lists.forEach(list => {\n        view.push( /*#__PURE__*/React.createElement(Card, {\n          className: styles.card,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(Card.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Card.Title, {\n          className: styles.listTitle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }\n        }, list.getListName(), /*#__PURE__*/React.createElement(Button, {\n          className: styles.cardButton,\n          onClick: () => {\n            this.deleteList(list);\n          },\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }\n        }, \"Delete\")), this.createCards(list.getListID()), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => {\n            this.toggleCreationView(true, 'card');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }\n        }, \"Create new card\"))));\n      });\n      lists.push(view);\n    }\n\n    return lists;\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  async createList(name) {\n    const response = await ApiService.CreateList(name, +window.location.pathname.split('/')[2]);\n    const list = new ListModel(response.list_id, response.list_name);\n    this.lists.push(list);\n    this.refresh();\n  }\n\n  async createCard(name) {\n    const response = await ApiService.CreateCard(name, +window.location.pathname.split('/')[2]);\n    const card = new CardModel(response.card_id, response.list_id, response.card_name, response.card_description);\n    this.cards.push(card);\n    this.refresh();\n  }\n\n  createListCreationView() {\n    if (this.state.creationView && this.state.objectToCreate === 'list') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.createNewButtonDiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        name: 'newListName',\n        value: this.state.newListName,\n        onChange: this.handleChange.bind(this),\n        type: \"text\",\n        placeholder: \"New list name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.createNewButtonDiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => this.createList(this.state.newListName),\n        variant: \"success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }\n      }, \"Create\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => this.toggleCreationView(false, ''),\n        variant: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }, \"Hide\")));\n    } else if (this.state.creationView && this.state.objectToCreate === 'card') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.createNewButtonDiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        name: 'newCardName',\n        value: this.state.newCardName,\n        onChange: this.handleChange.bind(this),\n        type: \"text\",\n        placeholder: \"New card name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.createNewButtonDiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => this.createCard(this.state.newCardName),\n        variant: \"success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, \"Create\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => this.toggleCreationView(false, ''),\n        variant: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }, \"Hide\")));\n    }\n  }\n\n  toggleCreationView(status, object) {\n    this.setState({\n      creationView: status,\n      objectToCreate: object\n    });\n  }\n\n  renderRedirect() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: '/' + this.state.redirectUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n  createCards(list_id) {\n    let cards = [];\n\n    if (this.state.refresh) {\n      let view = [];\n      this.cards.forEach(card => {\n        if (card.getCardListID() === list_id) {\n          view.push( /*#__PURE__*/React.createElement(Card, {\n            className: styles.cardObject,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 31\n            }\n          }, /*#__PURE__*/React.createElement(Card.Body, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(Card.Title, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }\n          }, card.getCardName()), /*#__PURE__*/React.createElement(\"div\", {\n            className: styles.btnGroup,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            className: styles.cardButton,\n            onClick: () => {\n              this.deleteCard(card);\n            },\n            variant: \"danger\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }\n          }, \"Delete\")))));\n        }\n      });\n      cards.push(view);\n    }\n\n    return cards;\n  }\n\n  deleteCard(card) {\n    const index = this.cards.indexOf(card);\n\n    if (index !== -1) {\n      ApiService.DeleteCard(card).then(() => {\n        this.cards.splice(index, 1);\n        this.refresh();\n      });\n    }\n  }\n\n  deleteList(list) {\n    const index = this.lists.indexOf(list);\n\n    if (index !== -1) {\n      ApiService.DeleteList(list).then(() => {\n        this.lists.splice(index, 1);\n        this.refresh();\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/przemek/Documents/TrelloVol2-FrontEnd/src/components/table.component.tsx"],"names":["React","Redirect","UserService","Card","styles","Button","ApiService","ListModel","CardModel","Form","TablesComponent","Component","state","redirect","redirectUrl","refresh","creationView","newListName","objectToCreate","newCardName","lists","cards","render","subject","subscribe","setState","renderRedirect","handleBackToBoards","toggleCreationView","container","creationForm","createListCreationView","tables","createLists","componentDidMount","GetLists","window","location","pathname","split","buffer","list","GetCards","getListID","card","push","view","forEach","listTitle","getListName","cardButton","deleteList","createCards","handleChange","event","target","name","value","createList","response","CreateList","list_id","list_name","createCard","CreateCard","card_id","card_name","card_description","createNewButtonDiv","bind","status","object","getCardListID","cardObject","getCardName","btnGroup","deleteCard","index","indexOf","DeleteCard","then","splice","DeleteList"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport UserService from \"../services/user.service\";\nimport Card from \"react-bootstrap/Card\";\nimport styles from \"./tables.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport ApiService from \"../services/api.service\";\nimport {ListModel} from \"../models/list.model\";\nimport {CardModel} from \"../models/card.model\";\nimport {TableModel} from \"../models/table.model\";\nimport Form from \"react-bootstrap/Form\";\n\nexport default class TablesComponent extends React.Component {\n\n    state = {\n        redirect: false,\n        redirectUrl: '',\n        refresh: false,\n        creationView: false,\n        newListName: '',\n        objectToCreate: '',\n        newCardName: ''\n    }\n\n    lists: ListModel[] = [];\n    cards: CardModel[] = [];\n\n    private refresh(): void {\n        this.setState({refresh: false});\n\n        this.setState({refresh: true});\n    }\n\n    handleBackToBoards() {\n        this.setState({\n            redirect: true,\n            redirectUrl: 'tables'\n        })\n    }\n\n    async componentDidMount() {\n        this.lists = await ApiService.GetLists(+window.location.pathname.split('/')[2]);\n        const buffer = [];\n        for (const list of this.lists) {\n            let cards = await ApiService.GetCards(list.getListID());\n            for (const card of cards) {\n                buffer.push(card);\n            }\n        }\n        this.cards = buffer;\n        this.refresh();\n    }\n\n    private createLists() {\n        let lists = [];\n        if (this.state.refresh) {\n            let view: any[] = [];\n            this.lists.forEach(list => {\n                view.push(<Card className={styles.card}>\n                    <Card.Body>\n                        <Card.Title className={styles.listTitle}>\n                            {list.getListName()}\n                            <Button className={styles.cardButton} onClick={() => {\n                                this.deleteList(list);\n                            }} variant={\"danger\"}>Delete</Button>\n                        </Card.Title>\n                        {this.createCards(list.getListID())}\n                        <button onClick={() => {this.toggleCreationView(true, 'card')}}>Create new card</button>\n                    </Card.Body>\n                </Card>)\n            });\n            lists.push(view);\n        }\n        return lists;\n    }\n\n    render = () => {\n        UserService.subject.subscribe(() => {\n            this.setState({\n                redirect: true,\n                redirectUrl: '/login'\n            })\n        });\n        return <>\n            {this.renderRedirect()}\n            <button onClick={() => this.handleBackToBoards()}>Back to boards</button>\n            <button onClick={() => this.toggleCreationView(true, 'list')}>New list</button>\n            <div className={styles.container}>\n                <div className={styles.creationForm}>\n                    {this.createListCreationView()}\n                </div>\n                <div className={styles.tables}>\n                    {this.createLists()}\n                </div>\n            </div>\n        </>;\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    private async createList(name: string) {\n        const response = await ApiService.CreateList(name, +window.location.pathname.split('/')[2]);\n        const list = new ListModel(response.list_id, response.list_name);\n        this.lists.push(list);\n        this.refresh();\n    }\n\n    private async createCard(name: string) {\n        const response = await ApiService.CreateCard(name, +window.location.pathname.split('/')[2]);\n        const card = new CardModel(response.card_id, response.list_id, response.card_name, response.card_description);\n        this.cards.push(card);\n        this.refresh();\n    }\n\n    private createListCreationView() {\n        if (this.state.creationView && this.state.objectToCreate === 'list') {\n            return (<>\n                    <div className={styles.createNewButtonDiv}>\n                        <Form.Group>\n                            <Form.Control name={'newListName'} value={this.state.newListName}\n                                          onChange={this.handleChange.bind(this)} type=\"text\"\n                                          placeholder=\"New list name\"/>\n                        </Form.Group>\n                    </div>\n                    <div className={styles.createNewButtonDiv}>\n                        <Button onClick={() => this.createList(this.state.newListName)}\n                                variant={\"success\"}>Create</Button>\n                        <Button onClick={() => this.toggleCreationView(false, '')} variant={\"danger\"}>Hide</Button>\n                    </div>\n                </>\n            );\n        } else if (this.state.creationView && this.state.objectToCreate === 'card') {\n            return (<>\n                    <div className={styles.createNewButtonDiv}>\n                        <Form.Group>\n                            <Form.Control name={'newCardName'} value={this.state.newCardName}\n                                          onChange={this.handleChange.bind(this)} type=\"text\"\n                                          placeholder=\"New card name\"/>\n                        </Form.Group>\n                    </div>\n                    <div className={styles.createNewButtonDiv}>\n                        <Button onClick={() => this.createCard(this.state.newCardName)}\n                                variant={\"success\"}>Create</Button>\n                        <Button onClick={() => this.toggleCreationView(false, '')} variant={\"danger\"}>Hide</Button>\n                    </div>\n                </>\n            );\n        }\n    }\n\n    private toggleCreationView(status: boolean, object: string) {\n        this.setState({creationView: status, objectToCreate: object})\n    }\n\n    private renderRedirect() {\n        if (this.state.redirect) {\n            return <Redirect to={'/' + this.state.redirectUrl}/>\n        }\n    }\n\n    private createCards(list_id: number) {\n        let cards = [];\n        if (this.state.refresh) {\n            let view: any[] = [];\n            this.cards.forEach(card => {\n                if (card.getCardListID() === list_id) {\n                    view.push(<Card className={styles.cardObject}>\n                        <Card.Body>\n                            <Card.Title>\n                                {card.getCardName()}\n                            </Card.Title>\n                            <div className={styles.btnGroup}>\n                                <Button className={styles.cardButton} onClick={() => {\n                                    this.deleteCard(card);\n                                }} variant={\"danger\"}>Delete</Button>\n                            </div>\n                        </Card.Body>\n                    </Card>)\n                }\n            });\n            cards.push(view);\n        }\n        return cards;\n    }\n\n    private deleteCard(card: CardModel) {\n        const index = this.cards.indexOf(card);\n        if (index !== -1) {\n            ApiService.DeleteCard(card).then(() => {\n                this.cards.splice(index, 1);\n                this.refresh();\n            });\n        }\n    }\n\n    private deleteList(list: ListModel) {\n        const index = this.lists.indexOf(list);\n        if (index !== -1) {\n            ApiService.DeleteList(list).then(() => {\n                this.lists.splice(index, 1);\n                this.refresh();\n            });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}