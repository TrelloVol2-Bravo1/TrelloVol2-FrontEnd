{"ast":null,"code":"import ApiService from \"./api.service\";\nimport { Subject } from 'rxjs';\nconst UserService = {\n  subject: new Subject(),\n\n  getSubject() {\n    return this.subject.asObservable();\n  },\n\n  getAPIkey() {\n    return localStorage.getItem('x-api-key');\n  },\n\n  getUserId() {\n    return localStorage.getItem('x-user-id');\n  },\n\n  IsAuthenticated() {\n    const x_api_key = this.getAPIkey();\n    const x_user_id = this.getUserId();\n    return x_api_key !== null && x_api_key !== undefined && x_user_id !== null && x_user_id !== undefined;\n  },\n\n  LogIn(x_api_key, x_user_id) {\n    localStorage.setItem('x-api-key', x_api_key);\n    localStorage.setItem('x-user-id', x_user_id.toString());\n    this.subject.next(true);\n  },\n\n  async LogOut() {\n    const url = ApiService.getURL() + 'user/auth';\n    const requestOptions = {\n      method: \"DELETE\",\n      headers: this.getHeaders()\n    };\n    const response = await fetch(url, requestOptions);\n    const data = await response.json();\n\n    if (data.status_code === 'success') {\n      localStorage.removeItem('x-api-key');\n      localStorage.removeItem('x-user-id');\n    }\n\n    this.subject.next(false);\n  },\n\n  getHeaders() {\n    const header = new Headers();\n    header.append(\"Content-Type\", \"application/json\");\n    header.append(\"x-api-key\", this.getAPIkey());\n    header.append(\"x-user-id\", this.getUserId());\n    return header;\n  }\n\n};\nexport default UserService;","map":{"version":3,"sources":["/home/przemek/Documents/TrelloVol2-FrontEnd/src/services/user.service.ts"],"names":["ApiService","Subject","UserService","subject","getSubject","asObservable","getAPIkey","localStorage","getItem","getUserId","IsAuthenticated","x_api_key","x_user_id","undefined","LogIn","setItem","toString","next","LogOut","url","getURL","requestOptions","method","headers","getHeaders","response","fetch","data","json","status_code","removeItem","header","Headers","append"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,SAAQC,OAAR,QAAkC,MAAlC;AAEA,MAAMC,WAAW,GAAG;AAEhBC,EAAAA,OAAO,EAAE,IAAIF,OAAJ,EAFO;;AAIhBG,EAAAA,UAAU,GAAmB;AACzB,WAAO,KAAKD,OAAL,CAAaE,YAAb,EAAP;AACH,GANe;;AAQhBC,EAAAA,SAAS,GAAG;AACR,WAAOC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAP;AACH,GAVe;;AAYhBC,EAAAA,SAAS,GAAG;AACR,WAAOF,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAP;AACH,GAde;;AAgBhBE,EAAAA,eAAe,GAAY;AACvB,UAAMC,SAAS,GAAG,KAAKL,SAAL,EAAlB;AACA,UAAMM,SAAS,GAAG,KAAKH,SAAL,EAAlB;AACA,WAAOE,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKE,SAApC,IACHD,SAAS,KAAK,IADX,IACmBA,SAAS,KAAKC,SADxC;AAEH,GArBe;;AAuBhBC,EAAAA,KAAK,CAACH,SAAD,EAAoBC,SAApB,EAAuC;AACxCL,IAAAA,YAAY,CAACQ,OAAb,CAAqB,WAArB,EAAkCJ,SAAlC;AACAJ,IAAAA,YAAY,CAACQ,OAAb,CAAqB,WAArB,EAAkCH,SAAS,CAACI,QAAV,EAAlC;AACA,SAAKb,OAAL,CAAac,IAAb,CAAkB,IAAlB;AACH,GA3Be;;AA6BhB,QAAMC,MAAN,GAAe;AACX,UAAMC,GAAG,GAAGnB,UAAU,CAACoB,MAAX,KAAsB,WAAlC;AACA,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,QADW;AAEnBC,MAAAA,OAAO,EAAE,KAAKC,UAAL;AAFU,KAAvB;AAIA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAME,cAAN,CAA5B;AACA,UAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AACA,QAAID,IAAI,CAACE,WAAL,KAAqB,SAAzB,EAAoC;AAChCtB,MAAAA,YAAY,CAACuB,UAAb,CAAwB,WAAxB;AACAvB,MAAAA,YAAY,CAACuB,UAAb,CAAwB,WAAxB;AACH;;AACD,SAAK3B,OAAL,CAAac,IAAb,CAAkB,KAAlB;AACH,GA1Ce;;AA4ChBO,EAAAA,UAAU,GAAG;AACT,UAAMO,MAAM,GAAG,IAAIC,OAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,MAAP,CAAc,cAAd,EAA8B,kBAA9B;AACAF,IAAAA,MAAM,CAACE,MAAP,CAAc,WAAd,EAA2B,KAAK3B,SAAL,EAA3B;AACAyB,IAAAA,MAAM,CAACE,MAAP,CAAc,WAAd,EAA2B,KAAKxB,SAAL,EAA3B;AACA,WAAOsB,MAAP;AACH;;AAlDe,CAApB;AAqDA,eAAe7B,WAAf","sourcesContent":["import ApiService from \"./api.service\";\nimport {Subject, Observable} from 'rxjs';\n\nconst UserService = {\n\n    subject: new Subject(),\n\n    getSubject():Observable<any> {\n        return this.subject.asObservable();\n    },\n\n    getAPIkey() {\n        return localStorage.getItem('x-api-key');\n    },\n\n    getUserId() {\n        return localStorage.getItem('x-user-id');\n    },\n\n    IsAuthenticated(): boolean {\n        const x_api_key = this.getAPIkey();\n        const x_user_id = this.getUserId();\n        return x_api_key !== null && x_api_key !== undefined &&\n            x_user_id !== null && x_user_id !== undefined;\n    },\n\n    LogIn(x_api_key: string, x_user_id: number) {\n        localStorage.setItem('x-api-key', x_api_key);\n        localStorage.setItem('x-user-id', x_user_id.toString());\n        this.subject.next(true);\n    },\n\n    async LogOut() {\n        const url = ApiService.getURL() + 'user/auth';\n        const requestOptions = {\n            method: \"DELETE\",\n            headers: this.getHeaders()\n        };\n        const response = await fetch(url, requestOptions);\n        const data = await response.json();\n        if (data.status_code === 'success') {\n            localStorage.removeItem('x-api-key');\n            localStorage.removeItem('x-user-id');\n        }\n        this.subject.next(false);\n    },\n\n    getHeaders() {\n        const header = new Headers();\n        header.append(\"Content-Type\", \"application/json\");\n        header.append(\"x-api-key\", this.getAPIkey() as string);\n        header.append(\"x-user-id\", this.getUserId() as string);\n        return header;\n    }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}