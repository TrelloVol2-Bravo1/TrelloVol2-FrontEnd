{"ast":null,"code":"import UserService from \"./user.service\";\nimport { TableModel } from \"../models/table.model\";\nimport { ListModel } from \"../models/list.model\";\nexport default class ApiService {\n  static getURL() {\n    return process.env.REACT_APP_SERVER_URL;\n  }\n\n  static async GetTables() {\n    const requestOptions = {\n      method: 'GET',\n      headers: UserService.getHeaders()\n    };\n    const tables = [];\n    const response = await fetch(ApiService.getURL() + 'table', requestOptions);\n    const data = await response.json();\n\n    for (let i = 0; i < data.data.length; i++) {\n      const table = new TableModel(data.data[i].table_id, data.data[i].table_name, data.data[i].user_id);\n      tables.push(table);\n    }\n\n    return tables;\n  }\n\n  static async GetLists(id) {\n    const requestOptions = {\n      method: 'GET',\n      headers: UserService.getHeaders()\n    };\n    const lists = [];\n    const response = await fetch(`${ApiService.getURL()}listTable/${id}`, requestOptions);\n    const data = await response.json();\n\n    for (let i = 0; i < data.data.lemgth; i++) {\n      const list = new ListModel(data.data[i].list_id, data.data[i].list_name);\n    }\n  }\n\n  static async DeleteTable(table) {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: UserService.getHeaders()\n    };\n    const response = await fetch(ApiService.getURL() + 'table/' + table.getTableId(), requestOptions);\n    const data = await response.json();\n    console.log(data);\n  }\n\n  static async CreateTable(name) {\n    const requestOptions = {\n      method: 'POST',\n      headers: UserService.getHeaders(),\n      body: JSON.stringify({\n        name: name\n      })\n    };\n    const response = await fetch(ApiService.getURL() + 'table', requestOptions);\n    const data = await response.json();\n    return data.table;\n  }\n\n}","map":{"version":3,"sources":["/home/przemek/Documents/TrelloVol2-FrontEnd/src/services/api.service.ts"],"names":["UserService","TableModel","ListModel","ApiService","getURL","process","env","REACT_APP_SERVER_URL","GetTables","requestOptions","method","headers","getHeaders","tables","response","fetch","data","json","i","length","table","table_id","table_name","user_id","push","GetLists","id","lists","lemgth","list","list_id","list_name","DeleteTable","getTableId","console","log","CreateTable","name","body","JSON","stringify"],"mappings":"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","sourcesContent":["import UserService from \"./user.service\";\nimport {TableModel} from \"../models/table.model\";\nimport {ListModel} from \"../models/list.model\";\n\nexport default class ApiService{\n    static getURL() {\n        return process.env.REACT_APP_SERVER_URL;\n    }\n\n    static async GetTables() {\n        const requestOptions = {\n            method: 'GET',\n            headers: UserService.getHeaders()\n        };\n\n        const tables = [];\n\n        const response = await fetch(ApiService.getURL() + 'table', requestOptions);\n        const data = await response.json();\n        for (let i = 0; i < data.data.length; i++) {\n            const table = new TableModel(data.data[i].table_id, data.data[i].table_name, data.data[i].user_id);\n            tables.push(table);\n        }\n        return tables;\n    }\n\n    static async GetLists(id: number) {\n        const requestOptions = {\n            method: 'GET',\n            headers: UserService.getHeaders()\n        };\n\n        const lists = [];\n\n        const response = await fetch(`${ApiService.getURL()}listTable/${id}`, requestOptions);\n        const data = await response.json();\n        for (let i = 0; i < data.data.lemgth; i++) {\n            const list = new ListModel(data.data[i].list_id, data.data[i].list_name);\n        }\n    }\n\n    static async DeleteTable(table: TableModel) {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: UserService.getHeaders()\n        };\n\n        const response = await fetch(ApiService.getURL() + 'table/' + table.getTableId(), requestOptions);\n        const data = await  response.json();\n        console.log(data);\n    }\n\n    static async CreateTable(name: string) {\n        const requestOptions = {\n            method: 'POST',\n            headers: UserService.getHeaders(),\n            body: JSON.stringify({\n                name: name\n            }),\n        };\n\n        const response = await fetch(ApiService.getURL() + 'table', requestOptions);\n        const data = await  response.json();\n        return data.table;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}