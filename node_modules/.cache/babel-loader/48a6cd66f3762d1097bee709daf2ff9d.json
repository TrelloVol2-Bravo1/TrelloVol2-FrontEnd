{"ast":null,"code":"var _jsxFileName = \"/home/przemek/Documents/TrelloVol2-FrontEnd/src/components/table.component.tsx\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport UserService from \"../services/user.service\";\nimport Card from \"react-bootstrap/Card\";\nimport styles from \"./tables.module.css\";\nimport ApiService from \"../services/api.service\";\nexport default class TablesComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      redirect: false,\n      redirectUrl: '',\n      refresh: false\n    };\n    this.lists = [];\n    this.cards = [];\n\n    this.render = () => {\n      UserService.subject.subscribe(() => {\n        this.setState({\n          redirect: true,\n          redirectUrl: '/login'\n        });\n      });\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderRedirect(), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.handleBackToBoards(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, \"Back to boards\"), this.createLists());\n    };\n  }\n\n  refresh() {\n    this.setState({\n      refresh: false\n    });\n    this.setState({\n      refresh: true\n    });\n  }\n\n  handleBackToBoards() {\n    this.setState({\n      redirect: true,\n      redirectUrl: 'tables'\n    });\n  }\n\n  async componentDidMount() {\n    this.lists = await ApiService.GetLists(+window.location.pathname.split('/')[2]);\n    const buffer = [];\n\n    for (const list of this.lists) {\n      let cards = await ApiService.GetCards(list.getListID());\n\n      for (const card of cards) {\n        buffer.push(card);\n      }\n    }\n\n    this.cards = buffer;\n    this.refresh();\n  }\n\n  createLists() {\n    let lists = [];\n\n    if (this.state.refresh) {\n      let view = [];\n      this.lists.forEach(tab => {\n        view.push( /*#__PURE__*/React.createElement(Card, {\n          className: styles.card,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(Card.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Card.Title, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }\n        }, tab.getListName()), this.createCards())));\n      });\n      lists.push(view);\n    }\n\n    return lists;\n  }\n\n  renderRedirect() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: '/' + this.state.redirectUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n  createCards() {\n    let cards = [];\n\n    if (this.state.refresh) {\n      let view = [];\n      this.cards.forEach(card => {\n        view.push( /*#__PURE__*/React.createElement(Card, {\n          className: styles.card,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(Card.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Card.Title, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }\n        }, card.getCardName()), this.createCards())));\n      });\n      cards.push(view);\n    }\n\n    return cards;\n  }\n\n}","map":{"version":3,"sources":["/home/przemek/Documents/TrelloVol2-FrontEnd/src/components/table.component.tsx"],"names":["React","Redirect","UserService","Card","styles","ApiService","TablesComponent","Component","state","redirect","redirectUrl","refresh","lists","cards","render","subject","subscribe","setState","renderRedirect","handleBackToBoards","createLists","componentDidMount","GetLists","window","location","pathname","split","buffer","list","GetCards","getListID","card","push","view","forEach","tab","getListName","createCards","getCardName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport UserService from \"../services/user.service\";\nimport Card from \"react-bootstrap/Card\";\nimport styles from \"./tables.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport ApiService from \"../services/api.service\";\nimport {ListModel} from \"../models/list.model\";\nimport {CardModel} from \"../models/card.model\";\n\nexport default class TablesComponent extends React.Component {\n\n    state = {\n        redirect: false,\n        redirectUrl: '',\n        refresh: false\n    }\n\n    lists: ListModel[] = [];\n    cards: CardModel[] = [];\n\n    private refresh(): void {\n        this.setState({refresh: false});\n\n        this.setState({refresh: true});\n    }\n\n    handleBackToBoards() {\n        this.setState({\n            redirect: true,\n            redirectUrl: 'tables'\n        })\n    }\n\n    async componentDidMount() {\n        this.lists = await ApiService.GetLists(+window.location.pathname.split('/')[2]);\n        const buffer = [];\n        for (const list of this.lists) {\n            let cards = await ApiService.GetCards(list.getListID());\n            for (const card of cards) {\n                buffer.push(card);\n            }\n        }\n        this.cards = buffer;\n        this.refresh();\n    }\n\n    private createLists() {\n        let lists = [];\n        if (this.state.refresh) {\n            let view: any[] = [];\n            this.lists.forEach(tab => {\n                view.push(<Card className={styles.card}>\n                    <Card.Body>\n                        <Card.Title>\n                            {tab.getListName()}\n                        </Card.Title>\n                        {this.createCards()}\n                    </Card.Body>\n                </Card>)\n            });\n            lists.push(view);\n        }\n        return lists;\n    }\n\n    render = () => {\n        UserService.subject.subscribe(() => {\n            this.setState({\n                redirect: true,\n                redirectUrl: '/login'\n            })\n        });\n        return <>\n            {this.renderRedirect()}\n            <button onClick={() => this.handleBackToBoards()}>Back to boards</button>\n            {this.createLists()}\n        </>;\n    }\n\n    private renderRedirect() {\n        if (this.state.redirect) {\n            return <Redirect to={'/'  + this.state.redirectUrl}/>\n        }\n    }\n\n    private createCards() {\n        let cards = [];\n        if (this.state.refresh) {\n            let view: any[] = [];\n            this.cards.forEach(card => {\n                view.push(<Card className={styles.card}>\n                    <Card.Body>\n                        <Card.Title>\n                            {card.getCardName()}\n                        </Card.Title>\n                        {this.createCards()}\n                    </Card.Body>\n                </Card>)\n            });\n            cards.push(view);\n        }\n        return cards;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}